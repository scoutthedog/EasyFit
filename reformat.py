import excelcoordinates as xl
import datetime
from openpyxl import load_workbook

def reformat(wslist, exp):
    """
    wslist generated by the wtm function (raw unedited data from excel) --> database ready list

    The bulk of this function workhorse is the excelcoordinates class. (defined below)
    When an excelcoordinates class is defined, it is given tuples to describe the listwise location of the data.
    For an example:
    date_rec = (1,3) --> wslist[1][3] 
    Whatever is stored in wslist[1][3] when given to this function,
    will eventually be imported into the database as the date_rec.
    This is why it is important to know where the data is stored on each excel spread sheet.
    This function will (attemp to) logically determine which class instance should be used
    As different formats are encountered in old data, this function will be modified
    Additional class instances will be added as well
    """
    assay = wslist[2][5]
    if assay == 'Glycine DRC (uM)':
        assay = 'glyDRC'
    elif assay == 'Glutamate DRC (uM)' or assay == 'Glutamate DRC (uM) - in special Isethionate solutions':
        assay = 'gluDRC'
    elif assay == 'pH':
        assay = 'pH'
    elif assay == '1 min 1 conc ':
        assay = '1min1conc'
    elif assay == None:
        assay = wslist[2][4]
        if assay == 'Mg2+ (uM)':
            assay = 'mgDRC'
    else:
        assay = wslist[0][3]
        if assay == 'Zn2+ inhibition (10 mM Tricine)':
            assay = 'znDRC'
        else:
            assay = wslist[1][3]
            if assay == 'in 100 uM Glutamate and 100uM Glycine':
                assay = 'mGluGly'
    # CLASS INSTANCES
    glu = xl.excelcoordinates(assay = 'gluDRC', postp = postpA, date_inj = (0,1), date_rec = (1,1), vhold = (0,3), coagonist = (1,3), phsol = (0,5), drugid = None,
                       initials = (0,7), rig = (1,7), note = (0,9), filename = (6,0), glun1 = (7,1), glun2 = (7,2), 
                       current = (5,3), d_start = (4,5), d_end = (4,14), r_start = (7,5), r_end = (7,14), rec_note = (7,15))
    gly = xl.excelcoordinates(assay = 'glyDRC', postp = postpA, date_inj = (0,1), date_rec = (1,1), vhold = (0,3), coagonist = (1,3), phsol = (0,5), drugid = None,
                       initials = (0,7), rig = (1,7), note = (0,9), filename = (6,0), glun1 = (7,1), glun2 = (7,2), 
                       current = (5,3), d_start = (4,5), d_end = (4,14), r_start = (7,5), r_end = (7,14), rec_note = (7,15))
    mg = xl.excelcoordinates(assay = 'mgDRC', postp = postpA, date_inj = (0,1), date_rec = (1,1), vhold = (0,5), coagonist = (1,3), phsol = (1,5), drugid = None,
                      initials = (0,8), rig = (1,8), note = (0,10), filename = (6,0), glun1 = (7,1), glun2 = (7,2),
                      current = (5,3), d_start = (4,5), d_end = (4,13), r_start = (7,5), r_end = (7,13), rec_note = (7,14))
    ph = xl.excelcoordinates(assay = 'pH', postp = postpA, date_inj = (0,1), date_rec = (1,1), vhold = (0,5), coagonist = (1,2), phsol = (0,2), drugid = None,
                      initials = (0,9), rig = (1,9), note = (0,11), filename = (6,0), glun1 = (7,1), glun2 = (7,2),
                      current = (7,3), d_start = (4,6), d_end = (4,6), r_start = (7,6), r_end = (7,6), rec_note = (7,15))
    zn = xl.excelcoordinates(assay = 'znDRC', postp = postpA, date_inj = (0,1), date_rec = (1,1), vhold = (0,5), coagonist = (1,3), phsol = (1,5), drugid = None,
                      initials = (0,7), rig = (1,7), note = (0,9), filename = (6,0), glun1 = (5,1), glun2 = (5,2),
                      current = (5,3), d_start = (4,5), d_end = (4,10), r_start = (7,5), r_end = (7,10), rec_note = (7,14))
    # Class selection logic
    if assay == 'gluDRC':
        explist = glu.getexperiments(wslist)
        oocytes = glu.getoocytes(wslist)
    elif assay == 'glyDRC':
        explist = gly.getexperiments(wslist)
        oocytes = gly.getoocytes(wslist)
    elif assay == 'mgDRC':
        explist = mg.getexperiments(wslist)
        oocytes = mg.getoocytes(wslist)
    elif assay == 'znDRC':
        explist = zn.getexperiments(wslist)
        oocytes = zn.getoocytes(wslist)
    elif assay == 'pH':
        explist = ph.getexperiments(wslist)
        oocytes = ph.getoocytes(wslist)
    else:
        print("\nCANNOT UPLOAD\n")
        explist = []
        oocytes = []
    if exp == True:
        return explist
    else:
        return oocytes
def postpA(explist):
    """
    This is a post processing function A. It is used by the reformat function

    Mutiple post-processing functions may be added with developement.
    """
    date_inj = explist[2]
    if type(date_inj) != datetime.datetime:
        date_inj = None
    explist[2] = date_inj
    vhold = explist[4]
    vhold = vhold.strip('Vhold=')
    vhold = vhold.strip(' mV')
    explist[4] = vhold
    phsol = explist[6]
    phsol = phsol.strip('pH ')
    explist[6] = phsol
    rig = explist[8]
    rig = explist[8].replace('#','')
    initials = explist[9]
    if initials == 'skim':
        initials = 'sk'
    explist[9] = initials
    minidate = explist[3].strftime('%m%d%y')
    miniassay = explist[1].strip('DRC')
    explist[0] = miniassay + '-' + str(rig) + '-' + initials + '-' + minidate
    return(explist)
def find_nth(mystring, x, n, i = 0):
    """
    find the nth occurance of string 'x' in mystring
    """
    i = mystring.find(x, i)
    if n == 1 or i == -1:
        return i 
    else:
        return find_nth(mystring, x, n - 1, i + len(x))
def create_expid(file):
    """
    Function for creating the experiment ID. 
    
    This is an important primary key in the experiments table of the database,
    and a foriegn key to the oocytes table.
    """
    test = find_nth(file, '-', 4)
    #find the 4th occurance of '-' in file
    expid = file[:test]
    #remove anything after the 4th occurance of '-'
    #example: glu-mb1-jpa-082918-14.5   -->  glu-mb1-jpa-082918
    return expid
